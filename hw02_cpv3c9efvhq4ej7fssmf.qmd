---
title: "Functions-Iterations-Dates-purr"
format: html
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
```

### Question 1

Write a function (using r code and structure demonstrated in class) to calculate a z score for a given observed value, a mean, and a standard deviation value. And then use your function to find a z score for the following problem. (Research the internet to find the formula used to calculate a z score)\
Observed value = 25.77, mean = 23.54, standard deviation = 2.442

```{r}
zfunction <- function(x, u, s) {
  z <- (x - u) / s
  return(z)
}

zfunction(25.77, 23.54, 2.442)

```

### Question 2

Write a function to calculate the natural log of a number multiplied by the common log of the same number divided by the cube root of a given prime number, $\dfrac{\ln x \times \log x }{\sqrt[3]{p}}$.\
Use your function to find the answer if the number to be used for both log expressions is 32 and the given prime number is 11, $x = 32, \;\;p=11$.\
Also use R code to round your answer to the nearest tenth

```{r}
natlog <- function(x, p) {
  i <- (log(x) * log10(x)) / (p^(1/3))
  round(i, digits = 1)
}

natlog(32, 11)
```

### Question 3

Use and show R coding to calculate the standard deviation for each variable of the data table `mtcars` using the `Special For Loop Method`, which includes three components:

-   Output – an object to store the results

-   Sequence – the set of items to loop through

-   Body – the operations performed in each iteration

```{r}
sdvec <- vector(mode = "numeric", length = length(mtcars))
for (i in seq_along(mtcars)) { #identifies each column to be calculated
  sdvec[[i]] <- sd(mtcars[[i]], na.rm = TRUE)
}
sdvec
```

### Question 4:

Write only one line of the code to return only the leap years fo years 2024, 3021, 2000 or 1800, 800, 5050, 600 and 7156. using subsetting with `[]` and without using built-in functions.

```{r}
year <- c(2024, 3021, 2000)
year[leap_year(year)]
```

## Advanced Date Manipulation with lubridate

### Question 5:

Generate a sequence of dates from **January 1, 2015** to **December 31, 2025**, spaced by every **two months**. Extract the **year**, **quarter**, and **ISO week number** for each date.

```{r}
start <- ymd("2015-1-1")
end <- ymd("2025-12-31")
monthindex <- seq(2,132, by = 2) # index of which months to select from start date
monthsequence <- c(start, start %m+% months(monthindex)) # adds the indexed months to the start month, creating vector
monthsequence[length(monthsequence)] <- monthsequence[length(monthsequence)] - days(1) # subtracts one day from last month, since previous step added it as 1 January 2026
monthsequence

y <- year(monthsequence)
q <- quarter(monthsequence)
iw <- isoweek(monthsequence)

df <- data.frame(monthsequence, y, q, iw)
df
```

### Question 6:

Given the following dates, compute the difference in **months** and **weeks** between each consecutive pair.

``` r
sample_dates <- c("2018-03-15", "2020-07-20", "2023-01-10", "2025-09-05")
```

```{r}
sample_dates <- ymd(c("2018-03-15", "2020-07-20", "2023-01-10", "2025-09-05"))
sample_intervals <- int_diff(sample_dates) # creates difference in intervals vector

months(sample_intervals)
weeks(sample_intervals)
```

### Question 7: Higher-Order Functions with purrr

Using `map()` and `map_dbl()`, compute the **mean**, **median**, and **standard deviation** for each numeric vector in the following list:

``` r
num_lists <- list(c(4, 16, 25, 36, 49), c(2.3, 5.7, 8.1, 11.4), c(10, 20, 30, 40, 50))
```

```{r}
num_lists <- list(c(4, 16, 25, 36, 49), c(2.3, 5.7, 8.1, 11.4), c(10, 20, 30, 40, 50))

map(.x = num_lists, .f = mean, na.rm = TRUE)
map(.x = num_lists, .f = median, na.rm = TRUE)
map(.x = num_lists, .f = sd, na.rm = TRUE) # couldn't get loop to work, so used map individually to find each parameter

map_dbl(.x = num_lists, .f = mean, na.rm = TRUE)
map_dbl(.x = num_lists, .f = median, na.rm = TRUE)
map_dbl(.x = num_lists, .f = sd, na.rm = TRUE)
```

### Question 8: Combining lubridate and purrr

Given a list of mixed date formats, use `map()` and `possibly()` from `purrr` to safely convert them to **Date** format and extract the **month name**.

``` r
date_strings <- list("2023-06-10", "2022/12/25", "15-Aug-2021", "InvalidDate")
```

```{r}
library(purrr)
# date_strings <- list("2023-06-10", "2022/12/25", "15-Aug-2021", "InvalidDate")
# parse_date(date_strings)
# possibly(date_strings)
#?possibly()
```
